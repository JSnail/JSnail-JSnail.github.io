---
layout: post
title: java基础知识整理（四）
categories: Java
description: java基础知识整理（四）
keywords: Java, 注解
---

### 1. 注解分类

注解分为标准注解和元注解

#### 1. 标准注解


- @Override

	对覆盖超类中的方法进行标记，如果被标记的方法并没有覆盖超类的方法，编译器就会发出错误警告。

- @Deprecated

	对不鼓励使用或者已经过时的方法添加的注解

- @SuppressWarning

	选择性的取消特定代码段中的警告

- @SafeVarargs

	用于声明使用了可变长度参数的方法，在和泛型使用的时候不会出现类型安全问题

#### 2. 元注解

元注解有以下几种

- @Targe: 注解修饰的对象范围
- @Inherited: 表示注解可以被继承
- @Documented: 表示这个注解应该被JavaDoc工具记录
- @Retention: 用于声明注解的保留策略
- @Repeatable: 允许一个注解在同一声明类型（类、属性或方法）上多次使用


其中@Targe注解取值是一个ElementType类型的数组，其中有一下几种取值，对应不同的取值范围：

- ElementType.Type: 能修饰类、接口和枚举类型
- ElementType.FIELD：能修饰成员变量
- ElementType.METHOD：能修饰方法
- ElementType.PARAMETER：能修饰参数
- ElementType.CONSTRUCTOR：能修饰构造方法
- ElementType.LOCAL_VARIABLE：能修饰局部变量
- ElementType.ANNOTATION_TYPE：能修饰注解
- ElementType.PACJAGE：能修饰包
- ElementType.TYPE_PARAMETER：类型参数声明
- ElementType.TYPE_USE：使用类型

其中@Retention有三种类型，分别表示不同的分级策略。

- RetentionPolicy.SOURCE：源码级注解。注解信息只会保留在.java源码中，源码在编译后，注解信息被丢弃，不会保留在.class中
- RetentionPolicy.CLASS：编译时注解。注解信息会保留在.java和.Class文件中，运行时被丢弃，不会保存在jvm中
- RetentionPolicy.RUNTIME：运行时注解。当程序运行时jvm也会保存注解信息，可以通过反射获取到该注解信息

### 2. 定义注解

1. 基本定义

	定义新的注解类型使用@interface关键字

		public @interface Man{
		...
		}

	使用

		@Man
		public class AnnotationTest{
		...
		}

2. 定义成员变量

注解只有成员变量，没有方法。

	public @interface Man{
		String name();
		int age();	
	} 
	
	或者在定义的时候添加默认值	
	
	public @interface Man{
		String name() default  "蜗牛";
		int age() default 22;	
	} 
	
	这种定义方式在使用的时候就不必想下面的方式，可以直接使用默认值
	
使用

	@Man(name="蜗牛",age=22)
	public class AnnotationTest{
		...
	}

### 3. 注解处理器

#### 1. 运行时注解处理器

	处理运行时注解需要用到反射机制
		
		@Documented
		@Target(METHOD)
		@Retention(RUNTIME)
		public @interface Get{
			String value() default "";
		}
		
	使用该注解

		public class AnntationTest{
		@Get(value="http://xxxx")
		public String  getUrl()
			return "";
		}

	注解处理器

		public class AnnotionProcessor{
			public static void main (String[] args){
				Method[] methods = AnnotationTest.class.getDeclaredMethods();
				for (Method method : methods){
					Get get = m.getAnnotation(Get.class)
					System.out.println(get.value())						
				}
		
			}
		}

	上面使用了两个反射方法：getDeclaredMothods()、	getAnnotation(),他们都属于AnnotatedElement接口，class、	Method和Filed都实现了该接口，调用getAnnotation()方法返回	的值就是Get,最后调用value()方法获取其中的数据。

#### 2. 编译时注解处理器

1. 定义注解

  	在项目中建立一个java library 命名为annotations

		@Retention(RetentionPolicy.CLASS)  
		@Target(ElementType.TYPE)  
		public @interface MyAnnotation {  
		    String value();  
		} 

2. 编写注解处理器

再在项目中建立一个library用于存放注解处理器，命名为processor，同时需要配置gradle

		apply plugin:'java'
		dependencies{
		...
		compile project(':annotations')
		}
		//指定jdk版本
		sourceCompatibility = "1.7"
		targetCompatibility = "1.7"
		
这里定义一个注解处理器 ClassProcessor，每一个处理器都是继承于AbstractProcessor，并要求必须复写 process() 方法，通常我们使用会去复写以下4个方法：

	public class ClassProcessor extends AbstractProcessor {  
  
    /** 
     * init()方法会被注解处理工具调用，并输入ProcessingEnviroment参数。 
     * ProcessingEnviroment提供很多有用的工具类Elements, Types 和 Filer 
     * @param processingEnv 提供给 processor 用来访问工具框架的环境 
     */  
    @Override  
    public synchronized void init(ProcessingEnvironment processingEnv) {  
        super.init(processingEnv);  
    }  
  
    /** 
     * 这相当于每个处理器的主函数main()，你在这里写你的扫描、评估和处理注解的代码，以及生成Java文件。 
     * 输入参数RoundEnviroment，可以让你查询出包含特定注解的被注解元素 
     * @param annotations   请求处理的注解类型 
     * @param roundEnv  有关当前和以前的信息环境 
     * @return  如果返回 true，则这些注解已声明并且不要求后续 Processor 处理它们； 
     *          如果返回 false，则这些注解未声明并且可能要求后续 Processor 处理它们 
     */  
    @Override  
    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {  
        return false;  
    }  
  
    /** 
     * 这里必须指定，这个注解处理器是注册给哪个注解的。注意，它的返回值是一个字符串的集合，包含本处理器想要处理的注解类型的合法全称 
     * @return  注解器所支持的注解类型集合，如果没有这样的类型，则返回一个空集合 
     */  
    @Override  
    public Set<String> getSupportedAnnotationTypes() {  
        Set<String> annotataions = new LinkedHashSet<String>();  
        annotataions.add(ClassAnnotation.class.getCanonicalName());  
        return annotataions;  
    }  
  
    /** 
     * 指定使用的Java版本，通常这里返回SourceVersion.latestSupported()，默认返回SourceVersion.RELEASE_6 
     * @return  使用的Java版本 
     */  
    @Override  
    public SourceVersion getSupportedSourceVersion() {  
        return SourceVersion.latestSupported();  
    }  
	}  

现在来添加对注解的处理，简单的输出一些信息即可，代码如下：

		@Override  
		public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {  
		    // roundEnv.getElementsAnnotatedWith()返回使用给定注解类型的元素  
		    for (Element element : roundEnv.getElementsAnnotatedWith(ClassAnnotation.class)) {  
		        System.out.println("------------------------------");  
		        // 判断元素的类型为Class  
		        if (element.getKind() == ElementKind.CLASS) {  
		            // 显示转换元素类型  
		            TypeElement typeElement = (TypeElement) element;  
		            // 输出元素名称  
		            System.out.println(typeElement.getSimpleName());  
		            // 输出注解属性值  
		            System.out.println(typeElement.getAnnotation(MyAnnotation.class).value());  
		        }  
		        System.out.println("------------------------------");  
		    }  
		    return false;  
		}  

后面就是注册注解处理器了可以使用AutoService帮助注解，由于是编译时注解，如果注解依赖的话在编译之后就没用了，所以使用android-apt插件来依赖，在整个工程的gradle中添加apt，然后在主工程里面

	apply plugin:"com.neenbedankt.android-apt"
	...
	apt project('processor')


